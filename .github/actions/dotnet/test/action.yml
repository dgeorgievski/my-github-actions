name: dotnet-test
description: Run unit tests

inputs:
  verbosity:
    description: The log verbosity for the test run
    required: false
    default: 'normal'
  dotnet-version:
    description: The .NET SDK version to use
    required: false
    default: '9.0.300'

runs:
  using: composite
  steps:
    - name: dotnect-test
      shell: bash
      run: |
        echo "Running unit tests in ${{ github.workspace}}"
        
        dotnet test \
         --configuration Release \
         --verbosity ${{ inputs.verbosity }} \
         --logger trx \
         --collect:"XPlat Code Coverage"
        
        echo "Unit tests completed"
    
    - name: Upload Test Result Files
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: ${{ github.workspace }}/**/TestResults/**/*
        retention-days: 5


    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: (!cancelled())
      with:
        trx_files: "${{ github.workspace }}/**/*.trx"

    - name: Combine Coverage Reports # This is because one report is produced per project, and we want one result for all of them.
      uses: danielpalme/ReportGenerator-GitHub-Action@5
      with:
        reports: "**/*.cobertura.xml" # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
        targetdir: "${{ github.workspace }}" # REQUIRED # The directory where the generated report should be saved.
        reporttypes: "Cobertura" # The output formats and scope (separated by semicolon) Values: Badges, Clover, Cobertura, CsvSummary, Html, Html_Dark, Html_Light, Html_BlueRed, HtmlChart, HtmlInline, HtmlInline_AzurePipelines, HtmlInline_AzurePipelines_Dark, HtmlInline_AzurePipelines_Light, HtmlSummary, JsonSummary, Latex, LatexSummary, lcov, MarkdownSummary, MarkdownSummaryGithub, MarkdownDeltaSummary, MHtml, PngChart, SonarQube, TeamCitySummary, TextSummary, TextDeltaSummary, Xml, XmlSummary
        verbosity: "Info" # The verbosity level of the log messages. Values: Verbose, Info, Warning, Error, Off
        title: "Code Coverage" # Optional title.
        tag: "${{ github.run_number }}_${{ github.run_id }}" # Optional tag or build version.
        customSettings: "" # Optional custom settings (separated by semicolon). See: https://github.com/danielpalme/ReportGenerator/wiki/Settings.
        toolpath: "reportgeneratortool" # Default directory for installing the dotnet tool.

    - name: Upload Combined Coverage XML
      uses: actions/upload-artifact@v4
      with:
        name: coverage
        path: ${{ github.workspace }}/Cobertura.xml
        retention-days: 5

    - name: Publish Code Coverage Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: "Cobertura.xml"
        badge: true
        fail_below_min: false # just informative for now
        format: markdown
        hide_branch_rate: false
        hide_complexity: false
        indicators: true
        output: both
        thresholds: "10 30"

    - name: Publish test coverage
      shell: bash 
      run: |
        if [[ -f ./code-coverage-results.md ]]; then
          echo "##[notice]Code coverage report:"
          cat ./code-coverage-results.md >> $GITHUB_STEP_SUMMARY
        else
          echo "##[warning]No code coverage report found."
        fi

        
